/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.sakurasou.halo.bangumi.api

import io.sakurasou.halo.bangumi.model.Character
import io.sakurasou.halo.bangumi.model.CharacterPerson
import io.sakurasou.halo.bangumi.model.CharacterRevision
import io.sakurasou.halo.bangumi.model.DetailedRevision
import io.sakurasou.halo.bangumi.model.EpType
import io.sakurasou.halo.bangumi.model.EpisodeDetail
import io.sakurasou.halo.bangumi.model.ErrorDetail
import io.sakurasou.halo.bangumi.model.GetMyself200Response
import io.sakurasou.halo.bangumi.model.GetUserSubjectEpisodeCollection200Response
import io.sakurasou.halo.bangumi.model.Index
import io.sakurasou.halo.bangumi.model.IndexBasicInfo
import io.sakurasou.halo.bangumi.model.IndexSubjectAddInfo
import io.sakurasou.halo.bangumi.model.IndexSubjectEditInfo
import io.sakurasou.halo.bangumi.model.PagedCharacter
import io.sakurasou.halo.bangumi.model.PagedEpisode
import io.sakurasou.halo.bangumi.model.PagedPerson
import io.sakurasou.halo.bangumi.model.PagedRevision
import io.sakurasou.halo.bangumi.model.PagedSubject
import io.sakurasou.halo.bangumi.model.PagedUserCharacterCollection
import io.sakurasou.halo.bangumi.model.PagedUserCollection
import io.sakurasou.halo.bangumi.model.PagedUserPersonCollection
import io.sakurasou.halo.bangumi.model.PatchUserSubjectEpisodeCollectionRequest
import io.sakurasou.halo.bangumi.model.PersonCharacter
import io.sakurasou.halo.bangumi.model.PersonDetail
import io.sakurasou.halo.bangumi.model.PersonRevision
import io.sakurasou.halo.bangumi.model.PutUserEpisodeCollectionRequest
import io.sakurasou.halo.bangumi.model.RelatedCharacter
import io.sakurasou.halo.bangumi.model.RelatedPerson
import io.sakurasou.halo.bangumi.model.SearchCharactersRequest
import io.sakurasou.halo.bangumi.model.SearchPersonsRequest
import io.sakurasou.halo.bangumi.model.SearchSubjectsRequest
import io.sakurasou.halo.bangumi.model.Subject
import io.sakurasou.halo.bangumi.model.SubjectCategory
import io.sakurasou.halo.bangumi.model.SubjectCollectionType
import io.sakurasou.halo.bangumi.model.SubjectRevision
import io.sakurasou.halo.bangumi.model.SubjectType
import io.sakurasou.halo.bangumi.model.User
import io.sakurasou.halo.bangumi.model.UserCharacterCollection
import io.sakurasou.halo.bangumi.model.UserEpisodeCollection
import io.sakurasou.halo.bangumi.model.UserPersonCollection
import io.sakurasou.halo.bangumi.model.UserSubjectCollection
import io.sakurasou.halo.bangumi.model.UserSubjectCollectionModifyPayload
import io.sakurasou.halo.bangumi.model.V0RelatedSubject
import io.sakurasou.halo.bangumi.model.V0SubjectRelation

import org.openapitools.client.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class DefaultApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add a subject to Index
        * 
         * @param indexId 目录 ID 
         * @param indexSubjectAddInfo  (optional)
         * @return void
        */
        open suspend fun addSubjectToIndexByIndexId(indexId: kotlin.Int, indexSubjectAddInfo: IndexSubjectAddInfo?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = indexSubjectAddInfo

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/indices/{index_id}/subjects".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Collect character for current user
        * 为当前用户收藏角色
         * @param characterId 角色 ID 
         * @return void
        */
        open suspend fun collectCharacterByCharacterIdAndUserId(characterId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/characters/{character_id}/collect".replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Collect index for current user
        * 为当前用户收藏一条目录
         * @param indexId 目录 ID 
         * @return void
        */
        open suspend fun collectIndexByIndexIdAndUserId(indexId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/indices/{index_id}/collect".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Collect person for current user
        * 为当前用户收藏人物
         * @param personId 人物 ID 
         * @return void
        */
        open suspend fun collectPersonByPersonIdAndUserId(personId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/persons/{person_id}/collect".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a subject from a Index
        * 
         * @param indexId 目录 ID 
         * @param subjectId 条目 ID 
         * @return void
        */
        open suspend fun delelteSubjectFromIndexByIndexIdAndSubjectID(indexId: kotlin.Int, subjectId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/indices/{index_id}/subjects/{subject_id}".replace("{" + "index_id" + "}", "$indexId").replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Edit index&#39;s information
        * 
         * @param indexId 目录 ID 
         * @param indexBasicInfo  (optional)
         * @return Index
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun editIndexById(indexId: kotlin.Int, indexBasicInfo: IndexBasicInfo?): HttpResponse<Index> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = indexBasicInfo

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v0/indices/{index_id}".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Edit subject information in a index
        * 如果条目不存在于目录，会创建该条目
         * @param indexId 目录 ID 
         * @param subjectId 条目 ID 
         * @param indexSubjectEditInfo  (optional)
         * @return void
        */
        open suspend fun editIndexSubjectsByIndexIdAndSubjectID(indexId: kotlin.Int, subjectId: kotlin.Int, indexSubjectEditInfo: IndexSubjectEditInfo?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = indexSubjectEditInfo

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v0/indices/{index_id}/subjects/{subject_id}".replace("{" + "index_id" + "}", "$indexId").replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Character Detail
        * cache with 60s
         * @param characterId 角色 ID 
         * @return Character
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCharacterById(characterId: kotlin.Int): HttpResponse<Character> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/characters/{character_id}".replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Character Image
        * 
         * @param characterId 角色 ID 
         * @param type 枚举值 {small|grid|large|medium} 
         * @return void
        */
        open suspend fun getCharacterImageById(characterId: kotlin.Int, type: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/characters/{character_id}/image".replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Character Revision
        * 
         * @param revisionId 版本 ID 
         * @return CharacterRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCharacterRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<CharacterRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/characters/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Character Revisions
        * 
         * @param characterId 角色 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCharacterRevisions(characterId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            characterId?.apply { localVariableQuery["character_id"] = listOf("$characterId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/characters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episode
        * 
         * @param episodeId 章节 ID 
         * @return EpisodeDetail
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodeById(episodeId: kotlin.Int): HttpResponse<EpisodeDetail> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/episodes/{episode_id}".replace("{" + "episode_id" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episode Revision
        * 
         * @param revisionId 版本 ID 
         * @return DetailedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodeRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<DetailedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/episodes/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episode Revisions
        * 
         * @param episodeId 章节 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodeRevisions(episodeId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            episodeId?.apply { localVariableQuery["episode_id"] = listOf("$episodeId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/episodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episodes
        * 
         * @param subjectId 条目 ID 
         * @param type 参照章节的&#x60;type&#x60; (optional)
         * @param limit 分页参数 (optional, default to 100)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedEpisode
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodes(subjectId: kotlin.Int, type: EpType?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedEpisode> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/episodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Index By ID
        * 
         * @param indexId 目录 ID 
         * @return Index
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getIndexById(indexId: kotlin.Int): HttpResponse<Index> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/indices/{index_id}".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Index Subjects
        * 
         * @param indexId 目录 ID 
         * @param type 条目类型 (optional)
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return void
        */
        open suspend fun getIndexSubjectsByIndexId(indexId: kotlin.Int, type: SubjectType?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/indices/{index_id}/subjects".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get User
        * 返回当前 Access Token 对应的用户信息
         * @return GetMyself200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getMyself(): HttpResponse<GetMyself200Response> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/me",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person
        * cache with 60s
         * @param personId 人物 ID 
         * @return PersonDetail
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPersonById(personId: kotlin.Int): HttpResponse<PersonDetail> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person Image
        * 
         * @param personId 人物 ID 
         * @param type 枚举值 {small|grid|large|medium} 
         * @return void
        */
        open suspend fun getPersonImageById(personId: kotlin.Int, type: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}/image".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person Revision
        * 
         * @param revisionId 历史版本 ID 
         * @return PersonRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPersonRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<PersonRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/persons/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person Revisions
        * 
         * @param personId 角色 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPersonRevisions(personId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            personId?.apply { localVariableQuery["person_id"] = listOf("$personId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/persons",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * get person related characters
        * 
         * @param personId 人物 ID 
         * @return kotlin.collections.List<PersonCharacter>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedCharactersByPersonId(personId: kotlin.Int): HttpResponse<kotlin.collections.List<PersonCharacter>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}/characters".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Characters
        * 
         * @param subjectId 条目 ID 
         * @return kotlin.collections.List<RelatedCharacter>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedCharactersBySubjectId(subjectId: kotlin.Int): HttpResponse<kotlin.collections.List<RelatedCharacter>> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/characters".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * get character related persons
        * 
         * @param characterId 角色 ID 
         * @return kotlin.collections.List<CharacterPerson>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedPersonsByCharacterId(characterId: kotlin.Int): HttpResponse<kotlin.collections.List<CharacterPerson>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/characters/{character_id}/persons".replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Persons
        * 
         * @param subjectId 条目 ID 
         * @return kotlin.collections.List<RelatedPerson>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedPersonsBySubjectId(subjectId: kotlin.Int): HttpResponse<kotlin.collections.List<RelatedPerson>> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/persons".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * get character related subjects
        * 
         * @param characterId 角色 ID 
         * @return kotlin.collections.List<V0RelatedSubject>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedSubjectsByCharacterId(characterId: kotlin.Int): HttpResponse<kotlin.collections.List<V0RelatedSubject>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/characters/{character_id}/subjects".replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * get person related subjects
        * 
         * @param personId 人物 ID 
         * @return kotlin.collections.List<V0RelatedSubject>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedSubjectsByPersonId(personId: kotlin.Int): HttpResponse<kotlin.collections.List<V0RelatedSubject>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}/subjects".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Relations
        * 
         * @param subjectId 条目 ID 
         * @return kotlin.collections.List<V0SubjectRelation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedSubjectsBySubjectId(subjectId: kotlin.Int): HttpResponse<kotlin.collections.List<V0SubjectRelation>> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/subjects".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取条目
        * cache with 300s
         * @param subjectId 条目 ID 
         * @return Subject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjectById(subjectId: kotlin.Int): HttpResponse<Subject> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Image
        * 
         * @param subjectId 条目 ID 
         * @param type 枚举值 {small|grid|large|medium|common} 
         * @return void
        */
        open suspend fun getSubjectImageById(subjectId: kotlin.Int, type: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/image".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Revision
        * 
         * @param revisionId 版本 ID 
         * @return SubjectRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjectRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<SubjectRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/subjects/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Revisions
        * 
         * @param subjectId 条目 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjectRevisions(subjectId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 浏览条目
        * 第一页会 cache 24h，之后会 cache 1h
         * @param type 条目类型 
         * @param cat 条目分类，参照 &#x60;SubjectCategory&#x60; enum (optional)
         * @param series 是否系列，仅对书籍类型的条目有效 (optional)
         * @param platform 平台，仅对游戏类型的条目有效 (optional)
         * @param sort 排序，枚举值 {date|rank} (optional)
         * @param year 年份 (optional)
         * @param month 月份 (optional)
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedSubject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjects(type: SubjectType, cat: SubjectCategory?, series: kotlin.Boolean?, platform: kotlin.String?, sort: kotlin.String?, year: kotlin.Int?, month: kotlin.Int?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedSubject> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            cat?.apply { localVariableQuery["cat"] = listOf("$cat") }
            series?.apply { localVariableQuery["series"] = listOf("$series") }
            platform?.apply { localVariableQuery["platform"] = listOf("$platform") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            year?.apply { localVariableQuery["year"] = listOf("$year") }
            month?.apply { localVariableQuery["month"] = listOf("$month") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get User Avatar by name
        * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
         * @param username 设置了用户名之后无法使用 UID。 
         * @param type 枚举值 {small|large|medium} 
         * @return void
        */
        open suspend fun getUserAvatarByName(username: kotlin.String, type: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/avatar".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get User by name
        * 获取用户信息
         * @param username 设置了用户名之后无法使用 UID。 
         * @return User
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserByName(username: kotlin.String): HttpResponse<User> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户单个角色收藏信息
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @param characterId 角色 ID 
         * @return UserCharacterCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCharacterCollection(username: kotlin.String, characterId: kotlin.Int): HttpResponse<UserCharacterCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/characters/{character_id}".replace("{" + "username" + "}", "$username").replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户角色收藏列表
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @return PagedUserCharacterCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCharacterCollections(username: kotlin.String): HttpResponse<PagedUserCharacterCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/characters".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户单个条目收藏
        * 获取对应用户的收藏，查看私有收藏需要 access token
         * @param username 设置了用户名之后无法使用 UID。 
         * @param subjectId 条目 ID 
         * @return UserSubjectCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCollection(username: kotlin.String, subjectId: kotlin.Int): HttpResponse<UserSubjectCollection> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/{subject_id}".replace("{" + "username" + "}", "$username").replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户收藏
        * 获取对应用户的收藏，查看私有收藏需要access token。
         * @param username 设置了用户名之后无法使用 UID。 
         * @param subjectType 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType) (optional)
         * @param type 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType) (optional)
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedUserCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCollectionsByUsername(username: kotlin.String, subjectType: SubjectType?, type: SubjectCollectionType?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedUserCollection> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectType?.apply { localVariableQuery["subject_type"] = listOf("$subjectType") }
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 章节收藏信息
        * 
         * @param episodeId 章节 ID 
         * @return UserEpisodeCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserEpisodeCollection(episodeId: kotlin.Int): HttpResponse<UserEpisodeCollection> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/-/collections/-/episodes/{episode_id}".replace("{" + "episode_id" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户单个人物收藏信息
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @param personId 人物 ID 
         * @return UserPersonCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserPersonCollection(username: kotlin.String, personId: kotlin.Int): HttpResponse<UserPersonCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/persons/{person_id}".replace("{" + "username" + "}", "$username").replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户人物收藏列表
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @return PagedUserPersonCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserPersonCollections(username: kotlin.String): HttpResponse<PagedUserPersonCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/persons".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 章节收藏信息
        * 
         * @param subjectId 条目 ID 
         * @param offset 分页参数 (optional, default to 0)
         * @param limit 分页参数 (optional, default to 100)
         * @param episodeType 章节类型，不传则不按照章节进行筛选 (optional)
         * @return GetUserSubjectEpisodeCollection200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserSubjectEpisodeCollection(subjectId: kotlin.Int, offset: kotlin.Int?, limit: kotlin.Int?, episodeType: EpType?): HttpResponse<GetUserSubjectEpisodeCollection200Response> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            episodeType?.apply { localVariableQuery["episode_type"] = listOf("$episodeType") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/-/collections/{subject_id}/episodes".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a new index
        * 
         * @return Index
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun newIndex(): HttpResponse<Index> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/indices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 修改用户单个收藏
        * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
         * @param subjectId 条目 ID 
         * @param userSubjectCollectionModifyPayload  (optional)
         * @return void
        */
        open suspend fun patchUserCollection(subjectId: kotlin.Int, userSubjectCollectionModifyPayload: UserSubjectCollectionModifyPayload?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = userSubjectCollectionModifyPayload

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/v0/users/-/collections/{subject_id}".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 章节收藏信息
        * 同时会重新计算条目的完成度 
         * @param subjectId 条目 ID 
         * @param patchUserSubjectEpisodeCollectionRequest  (optional)
         * @return void
        */
        open suspend fun patchUserSubjectEpisodeCollection(subjectId: kotlin.Int, patchUserSubjectEpisodeCollectionRequest: PatchUserSubjectEpisodeCollectionRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = patchUserSubjectEpisodeCollectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/v0/users/-/collections/{subject_id}/episodes".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 新增或修改用户单个条目收藏
        * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
         * @param subjectId 条目 ID 
         * @param userSubjectCollectionModifyPayload  (optional)
         * @return void
        */
        open suspend fun postUserCollection(subjectId: kotlin.Int, userSubjectCollectionModifyPayload: UserSubjectCollectionModifyPayload?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = userSubjectCollectionModifyPayload

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/users/-/collections/{subject_id}".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 更新章节收藏信息
        * 
         * @param episodeId 章节 ID 
         * @param putUserEpisodeCollectionRequest  (optional)
         * @return void
        */
        open suspend fun putUserEpisodeCollection(episodeId: kotlin.Int, putUserEpisodeCollectionRequest: PutUserEpisodeCollectionRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = putUserEpisodeCollectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v0/users/-/collections/-/episodes/{episode_id}".replace("{" + "episode_id" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 角色搜索
        * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;nsfw&#x60;: 使用 &#x60;include&#x60; 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。 
         * @param limit 分页参数 (optional)
         * @param offset 分页参数 (optional)
         * @param searchCharactersRequest  (optional)
         * @return PagedCharacter
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun searchCharacters(limit: kotlin.Int?, offset: kotlin.Int?, searchCharactersRequest: SearchCharactersRequest?): HttpResponse<PagedCharacter> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = searchCharactersRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/search/characters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 人物搜索
        * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;career&#x60;: 职业，可以多次出现。&#x60;且&#x60; 关系。  不同筛选条件之间为 &#x60;且&#x60; 
         * @param limit 分页参数 (optional)
         * @param offset 分页参数 (optional)
         * @param searchPersonsRequest  (optional)
         * @return PagedPerson
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun searchPersons(limit: kotlin.Int?, offset: kotlin.Int?, searchPersonsRequest: SearchPersonsRequest?): HttpResponse<PagedPerson> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = searchPersonsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/search/persons",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 条目搜索
        * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;type&#x60;: 条目类型，参照 &#x60;SubjectType&#x60; enum， &#x60;或&#x60;。 - &#x60;tag&#x60;: 标签，可以多次出现。&#x60;且&#x60; 关系。 - &#x60;air_date&#x60;: 播出日期/发售日期。&#x60;且&#x60; 关系。 - &#x60;rating&#x60;: 用于搜索指定评分的条目。&#x60;且&#x60; 关系。 - &#x60;rank&#x60;: 用于搜索指定排名的条目。&#x60;且&#x60; 关系。 - &#x60;nsfw&#x60;: 使用 &#x60;include&#x60; 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 &#x60;且&#x60; 
         * @param limit 分页参数 (optional)
         * @param offset 分页参数 (optional)
         * @param searchSubjectsRequest  (optional)
         * @return PagedSubject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun searchSubjects(limit: kotlin.Int?, offset: kotlin.Int?, searchSubjectsRequest: SearchSubjectsRequest?): HttpResponse<PagedSubject> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = searchSubjectsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/search/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Uncollect character for current user
        * 为当前用户取消收藏角色
         * @param characterId 角色 ID 
         * @return void
        */
        open suspend fun uncollectCharacterByCharacterIdAndUserId(characterId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/characters/{character_id}/collect".replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Uncollect index for current user
        * 为当前用户取消收藏一条目录
         * @param indexId 目录 ID 
         * @return void
        */
        open suspend fun uncollectIndexByIndexIdAndUserId(indexId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/indices/{index_id}/collect".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Uncollect person for current user
        * 为当前用户取消收藏人物
         * @param personId 人物 ID 
         * @return void
        */
        open suspend fun uncollectPersonByPersonIdAndUserId(personId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/persons/{person_id}/collect".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
