/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport",
)

package io.sakurasou.halo.bangumi.api

import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.request.request
import io.sakurasou.halo.bangumi.model.PagedUserCharacterCollection
import io.sakurasou.halo.bangumi.model.PagedUserCollection
import io.sakurasou.halo.bangumi.model.SubjectCollectionType
import io.sakurasou.halo.bangumi.model.SubjectType
import io.sakurasou.halo.bangumi.model.User
import io.sakurasou.halo.bangumi.model.UserSubjectCollection
import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.HttpResponse
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.wrap

open class DefaultApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {
    /**
     * GET /v0/users/{username}/avatar
     * Get User Avatar by name
     * 获取用户头像，302 重定向至头像地址，设置了 username 之后无法使用 UID 查询。
     * @param username 设置了用户名之后无法使用 UID。
     * @param type 枚举值 {small|large|medium}
     * @return void
     */
    open suspend fun getUserAvatarByName(
        username: kotlin.String,
        type: kotlin.String,
    ): HttpResponse<Unit> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        type.apply { localVariableQuery["type"] = listOf(type) }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<Any?>(
                RequestMethod.GET,
                "/v0/users/{username}/avatar".replace("{" + "username" + "}", username),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = false,
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }

    /**
     * GET /v0/users/{username}
     * Get User by name
     * 获取用户信息
     * @param username 设置了用户名之后无法使用 UID。
     * @return User
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserByName(username: kotlin.String): HttpResponse<User> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<Any?>(
                RequestMethod.GET,
                "/v0/users/{username}".replace("{" + "username" + "}", username),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = false,
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }

    /**
     * GET /v0/users/{username}/collections/-/characters
     * 获取用户角色收藏列表
     *
     * @param username 设置了用户名之后无法使用 UID。
     * @return PagedUserCharacterCollection
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserCharacterCollections(username: kotlin.String): HttpResponse<PagedUserCharacterCollection> {
        val localVariableAuthNames = listOf<String>()

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<kotlin.Any?>(
                RequestMethod.GET,
                "/v0/users/{username}/collections/-/characters".replace("{" + "username" + "}", "$username"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = false,
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }

    /**
     * GET /v0/users/{username}/collections/{subject_id}
     * 获取用户单个条目收藏
     * 获取对应用户的收藏，查看私有收藏需要 access token
     * @param username 设置了用户名之后无法使用 UID。
     * @param subjectId 条目 ID
     * @return UserSubjectCollection
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserCollection(
        username: kotlin.String,
        subjectId: kotlin.Int,
    ): HttpResponse<UserSubjectCollection> {
        val localVariableAuthNames = listOf("OptionalHTTPBearer")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<Any?>(
                RequestMethod.GET,
                "/v0/users/{username}/collections/{subject_id}"
                    .replace(
                        "{" + "username" + "}",
                        username,
                    ).replace("{" + "subject_id" + "}", "$subjectId"),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true,
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }

    /**
     * GET /v0/users/{username}/collections
     * 获取用户收藏
     * 获取对应用户的收藏，查看私有收藏需要access token。
     * @param username 设置了用户名之后无法使用 UID。
     * @param subjectType 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType) (optional)
     * @param type 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType) (optional)
     * @param limit 分页参数 (optional, default to 30)
     * @param offset 分页参数 (optional, default to 0)
     * @return PagedUserCollection
     */
    @Suppress("UNCHECKED_CAST")
    open suspend fun getUserCollectionsByUsername(
        username: kotlin.String,
        subjectType: SubjectType?,
        type: SubjectCollectionType?,
        limit: kotlin.Int?,
        offset: kotlin.Int?,
    ): HttpResponse<PagedUserCollection> {
        val localVariableAuthNames = listOf("OptionalHTTPBearer")

        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        subjectType?.apply { localVariableQuery["subject_type"] = listOf("${subjectType.value}") }
        type?.apply { localVariableQuery["type"] = listOf("${type.value}") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig =
            RequestConfig<Any?>(
                RequestMethod.GET,
                "/v0/users/{username}/collections".replace("{" + "username" + "}", username),
                query = localVariableQuery,
                headers = localVariableHeaders,
                requiresAuthentication = true,
            )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames,
        ).wrap()
    }
}