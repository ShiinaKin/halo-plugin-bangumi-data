/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.sakurasou.halo.bangumi.api

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import io.sakurasou.halo.bangumi.api.DefaultApi
import io.sakurasou.halo.bangumi.model.Character
import io.sakurasou.halo.bangumi.model.CharacterPerson
import io.sakurasou.halo.bangumi.model.CharacterRevision
import io.sakurasou.halo.bangumi.model.DetailedRevision
import io.sakurasou.halo.bangumi.model.EpType
import io.sakurasou.halo.bangumi.model.EpisodeDetail
import io.sakurasou.halo.bangumi.model.ErrorDetail
import io.sakurasou.halo.bangumi.model.GetMyself200Response
import io.sakurasou.halo.bangumi.model.GetUserSubjectEpisodeCollection200Response
import io.sakurasou.halo.bangumi.model.Index
import io.sakurasou.halo.bangumi.model.IndexBasicInfo
import io.sakurasou.halo.bangumi.model.IndexSubjectAddInfo
import io.sakurasou.halo.bangumi.model.IndexSubjectEditInfo
import io.sakurasou.halo.bangumi.model.PagedCharacter
import io.sakurasou.halo.bangumi.model.PagedEpisode
import io.sakurasou.halo.bangumi.model.PagedPerson
import io.sakurasou.halo.bangumi.model.PagedRevision
import io.sakurasou.halo.bangumi.model.PagedSubject
import io.sakurasou.halo.bangumi.model.PagedUserCharacterCollection
import io.sakurasou.halo.bangumi.model.PagedUserCollection
import io.sakurasou.halo.bangumi.model.PagedUserPersonCollection
import io.sakurasou.halo.bangumi.model.PatchUserSubjectEpisodeCollectionRequest
import io.sakurasou.halo.bangumi.model.PersonCharacter
import io.sakurasou.halo.bangumi.model.PersonDetail
import io.sakurasou.halo.bangumi.model.PersonRevision
import io.sakurasou.halo.bangumi.model.PutUserEpisodeCollectionRequest
import io.sakurasou.halo.bangumi.model.RelatedCharacter
import io.sakurasou.halo.bangumi.model.RelatedPerson
import io.sakurasou.halo.bangumi.model.SearchCharactersRequest
import io.sakurasou.halo.bangumi.model.SearchPersonsRequest
import io.sakurasou.halo.bangumi.model.SearchSubjectsRequest
import io.sakurasou.halo.bangumi.model.Subject
import io.sakurasou.halo.bangumi.model.SubjectCategory
import io.sakurasou.halo.bangumi.model.SubjectCollectionType
import io.sakurasou.halo.bangumi.model.SubjectRevision
import io.sakurasou.halo.bangumi.model.SubjectType
import io.sakurasou.halo.bangumi.model.User
import io.sakurasou.halo.bangumi.model.UserCharacterCollection
import io.sakurasou.halo.bangumi.model.UserEpisodeCollection
import io.sakurasou.halo.bangumi.model.UserPersonCollection
import io.sakurasou.halo.bangumi.model.UserSubjectCollection
import io.sakurasou.halo.bangumi.model.UserSubjectCollectionModifyPayload
import io.sakurasou.halo.bangumi.model.V0RelatedSubject
import io.sakurasou.halo.bangumi.model.V0SubjectRelation

class DefaultApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DefaultApi
        //val apiInstance = DefaultApi()

        // to test addSubjectToIndexByIndexId
        should("test addSubjectToIndexByIndexId") {
            // uncomment below to test addSubjectToIndexByIndexId
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //val indexSubjectAddInfo : IndexSubjectAddInfo =  // IndexSubjectAddInfo | 
            //apiInstance.addSubjectToIndexByIndexId(indexId, indexSubjectAddInfo)
        }

        // to test collectCharacterByCharacterIdAndUserId
        should("test collectCharacterByCharacterIdAndUserId") {
            // uncomment below to test collectCharacterByCharacterIdAndUserId
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //apiInstance.collectCharacterByCharacterIdAndUserId(characterId)
        }

        // to test collectIndexByIndexIdAndUserId
        should("test collectIndexByIndexIdAndUserId") {
            // uncomment below to test collectIndexByIndexIdAndUserId
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //apiInstance.collectIndexByIndexIdAndUserId(indexId)
        }

        // to test collectPersonByPersonIdAndUserId
        should("test collectPersonByPersonIdAndUserId") {
            // uncomment below to test collectPersonByPersonIdAndUserId
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //apiInstance.collectPersonByPersonIdAndUserId(personId)
        }

        // to test delelteSubjectFromIndexByIndexIdAndSubjectID
        should("test delelteSubjectFromIndexByIndexIdAndSubjectID") {
            // uncomment below to test delelteSubjectFromIndexByIndexIdAndSubjectID
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //apiInstance.delelteSubjectFromIndexByIndexIdAndSubjectID(indexId, subjectId)
        }

        // to test editIndexById
        should("test editIndexById") {
            // uncomment below to test editIndexById
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //val indexBasicInfo : IndexBasicInfo =  // IndexBasicInfo | 
            //val result : Index = apiInstance.editIndexById(indexId, indexBasicInfo)
            //result shouldBe ("TODO")
        }

        // to test editIndexSubjectsByIndexIdAndSubjectID
        should("test editIndexSubjectsByIndexIdAndSubjectID") {
            // uncomment below to test editIndexSubjectsByIndexIdAndSubjectID
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val indexSubjectEditInfo : IndexSubjectEditInfo =  // IndexSubjectEditInfo | 
            //apiInstance.editIndexSubjectsByIndexIdAndSubjectID(indexId, subjectId, indexSubjectEditInfo)
        }

        // to test getCharacterById
        should("test getCharacterById") {
            // uncomment below to test getCharacterById
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val result : Character = apiInstance.getCharacterById(characterId)
            //result shouldBe ("TODO")
        }

        // to test getCharacterImageById
        should("test getCharacterImageById") {
            // uncomment below to test getCharacterImageById
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val type : kotlin.String = type_example // kotlin.String | 枚举值 {small|grid|large|medium}
            //apiInstance.getCharacterImageById(characterId, type)
        }

        // to test getCharacterRevisionByRevisionId
        should("test getCharacterRevisionByRevisionId") {
            // uncomment below to test getCharacterRevisionByRevisionId
            //val revisionId : kotlin.Int = 56 // kotlin.Int | 版本 ID
            //val result : CharacterRevision = apiInstance.getCharacterRevisionByRevisionId(revisionId)
            //result shouldBe ("TODO")
        }

        // to test getCharacterRevisions
        should("test getCharacterRevisions") {
            // uncomment below to test getCharacterRevisions
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedRevision = apiInstance.getCharacterRevisions(characterId, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getEpisodeById
        should("test getEpisodeById") {
            // uncomment below to test getEpisodeById
            //val episodeId : kotlin.Int = 56 // kotlin.Int | 章节 ID
            //val result : EpisodeDetail = apiInstance.getEpisodeById(episodeId)
            //result shouldBe ("TODO")
        }

        // to test getEpisodeRevisionByRevisionId
        should("test getEpisodeRevisionByRevisionId") {
            // uncomment below to test getEpisodeRevisionByRevisionId
            //val revisionId : kotlin.Int = 56 // kotlin.Int | 版本 ID
            //val result : DetailedRevision = apiInstance.getEpisodeRevisionByRevisionId(revisionId)
            //result shouldBe ("TODO")
        }

        // to test getEpisodeRevisions
        should("test getEpisodeRevisions") {
            // uncomment below to test getEpisodeRevisions
            //val episodeId : kotlin.Int = 56 // kotlin.Int | 章节 ID
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedRevision = apiInstance.getEpisodeRevisions(episodeId, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getEpisodes
        should("test getEpisodes") {
            // uncomment below to test getEpisodes
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val type : EpType =  // EpType | 参照章节的`type`
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedEpisode = apiInstance.getEpisodes(subjectId, type, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getIndexById
        should("test getIndexById") {
            // uncomment below to test getIndexById
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //val result : Index = apiInstance.getIndexById(indexId)
            //result shouldBe ("TODO")
        }

        // to test getIndexSubjectsByIndexId
        should("test getIndexSubjectsByIndexId") {
            // uncomment below to test getIndexSubjectsByIndexId
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //val type : SubjectType =  // SubjectType | 条目类型
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //apiInstance.getIndexSubjectsByIndexId(indexId, type, limit, offset)
        }

        // to test getMyself
        should("test getMyself") {
            // uncomment below to test getMyself
            //val result : GetMyself200Response = apiInstance.getMyself()
            //result shouldBe ("TODO")
        }

        // to test getPersonById
        should("test getPersonById") {
            // uncomment below to test getPersonById
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //val result : PersonDetail = apiInstance.getPersonById(personId)
            //result shouldBe ("TODO")
        }

        // to test getPersonImageById
        should("test getPersonImageById") {
            // uncomment below to test getPersonImageById
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //val type : kotlin.String = type_example // kotlin.String | 枚举值 {small|grid|large|medium}
            //apiInstance.getPersonImageById(personId, type)
        }

        // to test getPersonRevisionByRevisionId
        should("test getPersonRevisionByRevisionId") {
            // uncomment below to test getPersonRevisionByRevisionId
            //val revisionId : kotlin.Int = 56 // kotlin.Int | 历史版本 ID
            //val result : PersonRevision = apiInstance.getPersonRevisionByRevisionId(revisionId)
            //result shouldBe ("TODO")
        }

        // to test getPersonRevisions
        should("test getPersonRevisions") {
            // uncomment below to test getPersonRevisions
            //val personId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedRevision = apiInstance.getPersonRevisions(personId, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getRelatedCharactersByPersonId
        should("test getRelatedCharactersByPersonId") {
            // uncomment below to test getRelatedCharactersByPersonId
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //val result : kotlin.collections.List<PersonCharacter> = apiInstance.getRelatedCharactersByPersonId(personId)
            //result shouldBe ("TODO")
        }

        // to test getRelatedCharactersBySubjectId
        should("test getRelatedCharactersBySubjectId") {
            // uncomment below to test getRelatedCharactersBySubjectId
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val result : kotlin.collections.List<RelatedCharacter> = apiInstance.getRelatedCharactersBySubjectId(subjectId)
            //result shouldBe ("TODO")
        }

        // to test getRelatedPersonsByCharacterId
        should("test getRelatedPersonsByCharacterId") {
            // uncomment below to test getRelatedPersonsByCharacterId
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val result : kotlin.collections.List<CharacterPerson> = apiInstance.getRelatedPersonsByCharacterId(characterId)
            //result shouldBe ("TODO")
        }

        // to test getRelatedPersonsBySubjectId
        should("test getRelatedPersonsBySubjectId") {
            // uncomment below to test getRelatedPersonsBySubjectId
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val result : kotlin.collections.List<RelatedPerson> = apiInstance.getRelatedPersonsBySubjectId(subjectId)
            //result shouldBe ("TODO")
        }

        // to test getRelatedSubjectsByCharacterId
        should("test getRelatedSubjectsByCharacterId") {
            // uncomment below to test getRelatedSubjectsByCharacterId
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val result : kotlin.collections.List<V0RelatedSubject> = apiInstance.getRelatedSubjectsByCharacterId(characterId)
            //result shouldBe ("TODO")
        }

        // to test getRelatedSubjectsByPersonId
        should("test getRelatedSubjectsByPersonId") {
            // uncomment below to test getRelatedSubjectsByPersonId
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //val result : kotlin.collections.List<V0RelatedSubject> = apiInstance.getRelatedSubjectsByPersonId(personId)
            //result shouldBe ("TODO")
        }

        // to test getRelatedSubjectsBySubjectId
        should("test getRelatedSubjectsBySubjectId") {
            // uncomment below to test getRelatedSubjectsBySubjectId
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val result : kotlin.collections.List<V0SubjectRelation> = apiInstance.getRelatedSubjectsBySubjectId(subjectId)
            //result shouldBe ("TODO")
        }

        // to test getSubjectById
        should("test getSubjectById") {
            // uncomment below to test getSubjectById
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val result : Subject = apiInstance.getSubjectById(subjectId)
            //result shouldBe ("TODO")
        }

        // to test getSubjectImageById
        should("test getSubjectImageById") {
            // uncomment below to test getSubjectImageById
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val type : kotlin.String = type_example // kotlin.String | 枚举值 {small|grid|large|medium|common}
            //apiInstance.getSubjectImageById(subjectId, type)
        }

        // to test getSubjectRevisionByRevisionId
        should("test getSubjectRevisionByRevisionId") {
            // uncomment below to test getSubjectRevisionByRevisionId
            //val revisionId : kotlin.Int = 56 // kotlin.Int | 版本 ID
            //val result : SubjectRevision = apiInstance.getSubjectRevisionByRevisionId(revisionId)
            //result shouldBe ("TODO")
        }

        // to test getSubjectRevisions
        should("test getSubjectRevisions") {
            // uncomment below to test getSubjectRevisions
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedRevision = apiInstance.getSubjectRevisions(subjectId, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getSubjects
        should("test getSubjects") {
            // uncomment below to test getSubjects
            //val type : SubjectType =  // SubjectType | 条目类型
            //val cat : SubjectCategory =  // SubjectCategory | 条目分类，参照 `SubjectCategory` enum
            //val series : kotlin.Boolean = true // kotlin.Boolean | 是否系列，仅对书籍类型的条目有效
            //val platform : kotlin.String = platform_example // kotlin.String | 平台，仅对游戏类型的条目有效
            //val sort : kotlin.String = sort_example // kotlin.String | 排序，枚举值 {date|rank}
            //val year : kotlin.Int = 56 // kotlin.Int | 年份
            //val month : kotlin.Int = 56 // kotlin.Int | 月份
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedSubject = apiInstance.getSubjects(type, cat, series, platform, sort, year, month, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getUserAvatarByName
        should("test getUserAvatarByName") {
            // uncomment below to test getUserAvatarByName
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val type : kotlin.String = type_example // kotlin.String | 枚举值 {small|large|medium}
            //apiInstance.getUserAvatarByName(username, type)
        }

        // to test getUserByName
        should("test getUserByName") {
            // uncomment below to test getUserByName
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val result : User = apiInstance.getUserByName(username)
            //result shouldBe ("TODO")
        }

        // to test getUserCharacterCollection
        should("test getUserCharacterCollection") {
            // uncomment below to test getUserCharacterCollection
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //val result : UserCharacterCollection = apiInstance.getUserCharacterCollection(username, characterId)
            //result shouldBe ("TODO")
        }

        // to test getUserCharacterCollections
        should("test getUserCharacterCollections") {
            // uncomment below to test getUserCharacterCollections
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val result : PagedUserCharacterCollection = apiInstance.getUserCharacterCollections(username)
            //result shouldBe ("TODO")
        }

        // to test getUserCollection
        should("test getUserCollection") {
            // uncomment below to test getUserCollection
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val result : UserSubjectCollection = apiInstance.getUserCollection(username, subjectId)
            //result shouldBe ("TODO")
        }

        // to test getUserCollectionsByUsername
        should("test getUserCollectionsByUsername") {
            // uncomment below to test getUserCollectionsByUsername
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val subjectType : SubjectType =  // SubjectType | 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType)
            //val type : SubjectCollectionType =  // SubjectCollectionType | 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType)
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val result : PagedUserCollection = apiInstance.getUserCollectionsByUsername(username, subjectType, type, limit, offset)
            //result shouldBe ("TODO")
        }

        // to test getUserEpisodeCollection
        should("test getUserEpisodeCollection") {
            // uncomment below to test getUserEpisodeCollection
            //val episodeId : kotlin.Int = 56 // kotlin.Int | 章节 ID
            //val result : UserEpisodeCollection = apiInstance.getUserEpisodeCollection(episodeId)
            //result shouldBe ("TODO")
        }

        // to test getUserPersonCollection
        should("test getUserPersonCollection") {
            // uncomment below to test getUserPersonCollection
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //val result : UserPersonCollection = apiInstance.getUserPersonCollection(username, personId)
            //result shouldBe ("TODO")
        }

        // to test getUserPersonCollections
        should("test getUserPersonCollections") {
            // uncomment below to test getUserPersonCollections
            //val username : kotlin.String = username_example // kotlin.String | 设置了用户名之后无法使用 UID。
            //val result : PagedUserPersonCollection = apiInstance.getUserPersonCollections(username)
            //result shouldBe ("TODO")
        }

        // to test getUserSubjectEpisodeCollection
        should("test getUserSubjectEpisodeCollection") {
            // uncomment below to test getUserSubjectEpisodeCollection
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val episodeType : EpType =  // EpType | 章节类型，不传则不按照章节进行筛选
            //val result : GetUserSubjectEpisodeCollection200Response = apiInstance.getUserSubjectEpisodeCollection(subjectId, offset, limit, episodeType)
            //result shouldBe ("TODO")
        }

        // to test newIndex
        should("test newIndex") {
            // uncomment below to test newIndex
            //val result : Index = apiInstance.newIndex()
            //result shouldBe ("TODO")
        }

        // to test patchUserCollection
        should("test patchUserCollection") {
            // uncomment below to test patchUserCollection
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val userSubjectCollectionModifyPayload : UserSubjectCollectionModifyPayload =  // UserSubjectCollectionModifyPayload | 
            //apiInstance.patchUserCollection(subjectId, userSubjectCollectionModifyPayload)
        }

        // to test patchUserSubjectEpisodeCollection
        should("test patchUserSubjectEpisodeCollection") {
            // uncomment below to test patchUserSubjectEpisodeCollection
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val patchUserSubjectEpisodeCollectionRequest : PatchUserSubjectEpisodeCollectionRequest =  // PatchUserSubjectEpisodeCollectionRequest | 
            //apiInstance.patchUserSubjectEpisodeCollection(subjectId, patchUserSubjectEpisodeCollectionRequest)
        }

        // to test postUserCollection
        should("test postUserCollection") {
            // uncomment below to test postUserCollection
            //val subjectId : kotlin.Int = 56 // kotlin.Int | 条目 ID
            //val userSubjectCollectionModifyPayload : UserSubjectCollectionModifyPayload =  // UserSubjectCollectionModifyPayload | 
            //apiInstance.postUserCollection(subjectId, userSubjectCollectionModifyPayload)
        }

        // to test putUserEpisodeCollection
        should("test putUserEpisodeCollection") {
            // uncomment below to test putUserEpisodeCollection
            //val episodeId : kotlin.Int = 56 // kotlin.Int | 章节 ID
            //val putUserEpisodeCollectionRequest : PutUserEpisodeCollectionRequest =  // PutUserEpisodeCollectionRequest | 
            //apiInstance.putUserEpisodeCollection(episodeId, putUserEpisodeCollectionRequest)
        }

        // to test searchCharacters
        should("test searchCharacters") {
            // uncomment below to test searchCharacters
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val searchCharactersRequest : SearchCharactersRequest =  // SearchCharactersRequest | 
            //val result : PagedCharacter = apiInstance.searchCharacters(limit, offset, searchCharactersRequest)
            //result shouldBe ("TODO")
        }

        // to test searchPersons
        should("test searchPersons") {
            // uncomment below to test searchPersons
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val searchPersonsRequest : SearchPersonsRequest =  // SearchPersonsRequest | 
            //val result : PagedPerson = apiInstance.searchPersons(limit, offset, searchPersonsRequest)
            //result shouldBe ("TODO")
        }

        // to test searchSubjects
        should("test searchSubjects") {
            // uncomment below to test searchSubjects
            //val limit : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val offset : kotlin.Int = 56 // kotlin.Int | 分页参数
            //val searchSubjectsRequest : SearchSubjectsRequest =  // SearchSubjectsRequest | 
            //val result : PagedSubject = apiInstance.searchSubjects(limit, offset, searchSubjectsRequest)
            //result shouldBe ("TODO")
        }

        // to test uncollectCharacterByCharacterIdAndUserId
        should("test uncollectCharacterByCharacterIdAndUserId") {
            // uncomment below to test uncollectCharacterByCharacterIdAndUserId
            //val characterId : kotlin.Int = 56 // kotlin.Int | 角色 ID
            //apiInstance.uncollectCharacterByCharacterIdAndUserId(characterId)
        }

        // to test uncollectIndexByIndexIdAndUserId
        should("test uncollectIndexByIndexIdAndUserId") {
            // uncomment below to test uncollectIndexByIndexIdAndUserId
            //val indexId : kotlin.Int = 56 // kotlin.Int | 目录 ID
            //apiInstance.uncollectIndexByIndexIdAndUserId(indexId)
        }

        // to test uncollectPersonByPersonIdAndUserId
        should("test uncollectPersonByPersonIdAndUserId") {
            // uncomment below to test uncollectPersonByPersonIdAndUserId
            //val personId : kotlin.Int = 56 // kotlin.Int | 人物 ID
            //apiInstance.uncollectPersonByPersonIdAndUserId(personId)
        }

    }
}
